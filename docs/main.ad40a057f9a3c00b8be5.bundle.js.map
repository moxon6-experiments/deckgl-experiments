{"version":3,"file":"main.ad40a057f9a3c00b8be5.bundle.js","sources":["webpack:///./src/components/HexagonLayerExample.js"],"sourcesContent":["/* global window */\r\nimport React, {Component} from 'react';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport {PhongMaterial} from '@luma.gl/core';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = process.env.MapboxAccessToken; // eslint-disable-line\r\n\r\n// Source data CSV\r\nconst DATA_URL =\r\n  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'; // eslint-disable-line\r\n\r\nconst ambientLight = new AmbientLight({\r\n  color: [255, 255, 255],\r\n  intensity: 1.0\r\n});\r\n\r\nconst pointLight1 = new PointLight({\r\n  color: [255, 255, 255],\r\n  intensity: 0.8,\r\n  position: [-0.144528, 49.739968, 80000]\r\n});\r\n\r\nconst pointLight2 = new PointLight({\r\n  color: [255, 255, 255],\r\n  intensity: 0.8,\r\n  position: [-3.807751, 54.104682, 8000]\r\n});\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\r\n\r\nconst material = new PhongMaterial({\r\n  ambient: 0.64,\r\n  diffuse: 0.6,\r\n  shininess: 32,\r\n  specularColor: [51, 51, 51]\r\n});\r\n\r\nexport const INITIAL_VIEW_STATE = {\r\n  longitude: -1.4157267858730052,\r\n  latitude: 52.232395363869415,\r\n  zoom: 6.6,\r\n  minZoom: 5,\r\n  maxZoom: 15,\r\n  pitch: 40.5,\r\n  bearing: -27.396674584323023\r\n};\r\n\r\nconst colorRange = [\r\n  [1, 152, 189],\r\n  [73, 227, 206],\r\n  [216, 254, 181],\r\n  [254, 237, 177],\r\n  [254, 173, 84],\r\n  [209, 55, 78]\r\n];\r\n\r\nconst elevationScale = {min: 1, max: 50};\r\n\r\n/* eslint-disable react/no-deprecated */\r\nexport class App extends Component {\r\n  static get defaultColorRange() {\r\n    return colorRange;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      elevationScale: elevationScale.min\r\n    };\r\n\r\n    this.startAnimationTimer = null;\r\n    this.intervalTimer = null;\r\n\r\n    this._startAnimate = this._startAnimate.bind(this);\r\n    this._animateHeight = this._animateHeight.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._animate();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.data && this.props.data && nextProps.data.length !== this.props.data.length) {\r\n      this._animate();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._stopAnimate();\r\n  }\r\n\r\n  _animate() {\r\n    this._stopAnimate();\r\n\r\n    // wait 1.5 secs to start animation so that all data are loaded\r\n    this.startAnimationTimer = window.setTimeout(this._startAnimate, 1500);\r\n  }\r\n\r\n  _startAnimate() {\r\n    this.intervalTimer = window.setInterval(this._animateHeight, 20);\r\n  }\r\n\r\n  _stopAnimate() {\r\n    window.clearTimeout(this.startAnimationTimer);\r\n    window.clearTimeout(this.intervalTimer);\r\n  }\r\n\r\n  _animateHeight() {\r\n    if (this.state.elevationScale === elevationScale.max) {\r\n      this._stopAnimate();\r\n    } else {\r\n      this.setState({elevationScale: this.state.elevationScale + 1});\r\n    }\r\n  }\r\n\r\n  _renderLayers() {\r\n    const {data, radius = 1000, upperPercentile = 100, coverage = 1} = this.props;\r\n\r\n    return [\r\n      new HexagonLayer({\r\n        id: 'heatmap',\r\n        colorRange,\r\n        coverage,\r\n        data,\r\n        elevationRange: [0, 3000],\r\n        elevationScale: this.state.elevationScale,\r\n        extruded: true,\r\n        getPosition: d => d,\r\n        onHover: this.props.onHover,\r\n        opacity: 1,\r\n        pickable: Boolean(this.props.onHover),\r\n        radius,\r\n        upperPercentile,\r\n        material\r\n      })\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    const {viewState, controller = true, baseMap = true} = this.props;\r\n\r\n    return (\r\n      <DeckGL\r\n        layers={this._renderLayers()}\r\n        effects={[lightingEffect]}\r\n        initialViewState={INITIAL_VIEW_STATE}\r\n        viewState={viewState}\r\n        controller={controller}\r\n      >\r\n        {baseMap && (\r\n          <StaticMap\r\n            reuseMaps\r\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n            preventStyleDiffing={true}\r\n            mapboxApiAccessToken={MAPBOX_TOKEN}\r\n          />\r\n        )}\r\n      </DeckGL>\r\n    );\r\n  }\r\n}\r\n\r\nclass BaseExample extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n    require('d3-request').csv(DATA_URL, (error, response) => {\r\n      if (!error) {\r\n        const data = response.map(d => [Number(d.lng), Number(d.lat)]);\r\n        this.setState({ data })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.data) return \"Base Example Loading\"\r\n    return (\r\n      <App data={this.state.data} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default () => <BaseExample/>"],"mappings":"AASA","sourceRoot":""}